require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe HypothesesController, :type => :controller do

  let!(:user){FactoryGirl.create(:user)}
  # This should return the minimal set of attributes required to create a valid
  # Hypothesis. As you add validations to Hypothesis, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {name: "Virustauti"}
  }
  let!(:exercise){
    FactoryGirl.create(:exercise)
  }


  let(:invalid_attributes) {
    {name: ""}
  }


  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # HypothesesController. Be sure to keep this updated too.
  let(:valid_session) { {
      user_id: 1
  } }

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Hypothesis" do
        expect {
          post :create, {:hypothesis => valid_attributes}, valid_session
        }.to change(Hypothesis, :count).by(1)
      end

      it "assigns a newly created hypothesis as @hypothesis" do
        post :create, {:hypothesis => valid_attributes}, valid_session
        expect(assigns(:hypothesis)).to be_a(Hypothesis)
        expect(assigns(:hypothesis)).to be_persisted
      end

      it "redirects to the created hypothesis" do
        post :create, {:hypothesis => valid_attributes}, valid_session
        expect(response).to redirect_to(hypotheses_path(:layout => true))
      end
    end
  end


  describe "PUT update" do
    describe "with valid params" do
      let(:new_attributes) {
        {name: "Virustauti2"}
      }

      it "updates the requested hypothesis" do
        hypothesis = Hypothesis.create! valid_attributes
        put :update, {:id => hypothesis.to_param, :hypothesis => new_attributes}, valid_session
        hypothesis.reload
        expect(hypothesis.name).to eq("Virustauti2")
      end

      it "assigns the requested hypothesis as @hypothesis" do
        hypothesis = Hypothesis.create! valid_attributes
        put :update, {:id => hypothesis.to_param, :hypothesis => valid_attributes}, valid_session
        expect(assigns(:hypothesis)).to eq(hypothesis)
      end

      it "redirects to the hypothesis" do
        hypothesis = Hypothesis.create! valid_attributes
        put :update, {:id => hypothesis.to_param, :hypothesis => valid_attributes}, valid_session
        expect(response).to redirect_to(hypothesis)
      end
    end


    describe "with invalid params" do
      it "assigns the hypothesis as @hypothesis" do
        hypothesis = Hypothesis.create! valid_attributes
        put :update, {:id => hypothesis.to_param, :hypothesis => invalid_attributes}, valid_session
        expect(assigns(:hypothesis)).to eq(hypothesis)
      end

      it "redirects to the hypothesis" do
        hypothesis = Hypothesis.create! valid_attributes
        put :update, {:id => hypothesis.to_param, :hypothesis => invalid_attributes}, valid_session
        expect(response).to redirect_to(hypothesis)
      end
    end

  end


  describe "DELETE destroy" do
    it "destroys the requested hypothesis" do
      hypothesis = Hypothesis.create! valid_attributes
      expect {
        delete :destroy, {:id => hypothesis.to_param}, valid_session
      }.to change(Hypothesis, :count).by(-1)
    end

    it "redirects to the hypotheses list" do
      hypothesis = Hypothesis.create! valid_attributes
      delete :destroy, {:id => hypothesis.to_param}, valid_session
      expect(response).to redirect_to(hypotheses_path(:layout => true))
    end
  end
end
